                               #SECTION - 1
-- Question 1
-- 1. Create table DEPT with the following structure:-
create table DEPT
(
  DEPTNO int,
  DNAME varchar(15),
  LOC varchar(10)
);

-- Insert the following rows into the DEPT table:-

insert into DEPT (DEPTNO,DNAME,LOC) values
(10 ,'ACCOUNTING', 'NEW YORK'),
(20, 'RESEARCH', 'DALLAS'),
(30, 'SALES', 'CHICAGO'),
(40, 'OPERATIONS', 'BOSTON');

-- select * from DEPT;

################################################################################
-- Question 2
-- 2. Create table EMP with the following structure:-

create table EMP
(
  EMPNO int,
  ENAME varchar(10),
  JOB varchar(9),
  HIREDATE date,
  SAL float(7,2),
  COMM float(7,2),
  DEPTNO int  );


-- Insert the following rows into the EMP table:-
insert into EMP (EMPNO,ENAME,JOB,HIREDATE,SAL,COMM,DEPTNO) values
(7839, 'KING',   'MANAGER',  '1991-11-17', 5000, NULL, 10),
(7698, 'BLAKE',  'CLERK',    '1981-05-01', 2850, NULL, 30),
(7782, 'CLARK',  'MANAGER',  '1981-06-09', 2450, NULL, 10),
(7566, 'JONES',  'CLERK',    '1981-04-02', 2975, NULL, 20),
(7654, 'MARTIN', 'SALESMAN', '1981-09-28', 1250, 1400, 30),
(7499, 'ALLEN',  'SALESMAN', '1981-02-20', 1600, 300 , 30);

-- select * from EMP;

#######################################################################################################

-- 3. Display all the employees where SAL between 2500 and 5000 (inclusive of both).

select SAL from EMP
where SAL between 2500 and 5000;

#####################################################################################################

-- 4. Display all the ENAMEs in descending order of ENAME.

select ENAME from emp
order by ENAME desc;

#################################################################################################################

-- 5. Display all the JOBs in lowercase.

select lower(JOB) from EMP;

#################################################################################################################

-- 6. Display the ENAMEs and the lengths of the ENAMEs.

select ENAME , length(ENAME) from EMP;


##################################################################################################################

-- 7. Display the DEPTNO and the count of employees who belong to that DEPTNO .

select DEPTNO, count(DEPTNO) from EMP
group by DEPTNO;

#######################################################################################################################################

-- 8. Display the DNAMEs and the ENAMEs who belong to that DNAME.

select DNAME, ENAME from EMP,DEPT 
where DEPT.DEPTNO= EMP.DEPTNO;

#################################################################################################################################################

-- 9. Display the position at which the string ‘AR’ occurs in the ename.

select ENAME from EMP
where ENAME like '%AR%';



#####################################################################################################################################

-- 10. Display the HRA for each employee given that HRA is 20% of SAL

select ENAME, SAL ,SAL*(1.20) "HRA" from EMP;



-- ----------------------------------- SECTION-1 COMPLETED --------------------------------------------------------------------------------------------------



-- -------------------------------------#Section II #------------------------------------------------------------------------------------

/*1. Write a stored procedure by the name of PROC1 that accepts two varchar strings
as parameters. Your procedure should then determine if the first varchar string 
exists inside the varchar string. For example, if string1 = ‘DAC’ and string2 = 
‘CDAC, then string1 exists inside string2. The stored procedure should insert the 
appropriate message into a suitable TEMPP output table. Calling program for the 
stored procedure need not be written.*/

create table TEMPP
(
  msg varchar(50)
);

delimiter //
	create procedure PROC1(string1 varchar(20), string2 varchar(20))
		begin 
				if (instr(string1, string2))  then
                   insert into TEMPP values('The String2 Present in the String1');
				elseif (instr(string2,string1)) then
                   insert into TEMPP values('The String1 Present in the String2');
				else
                   insert into TEMPP values('The Strings are not present in one another');
				end if;
		end; //
delimiter ;

call PROC1('PG-DAC','DAC');
call PROC1('DAC','CDAC');
call PROC1('DAC','MUMBAI');
select * from TEMPP;


#############################################################################################################################################

/*2. Create a stored function by the name of FUNC1 to take three parameters, the 
sides of a triangle. The function should return a Boolean value:- TRUE if the 
triangle is valid, FALSE otherwise. A triangle is valid if the length of each side is 
less than the sum of the lengths of the other two sides. Check if the dimensions 
entered can form a valid triangle. Calling program for the stored function need not 
be written*/



create table TEMPP_1
(
  t int
);



delimiter //
	create function FUNC1(s1 int, s2 int , s3 int)
		returns boolean
			deterministic
				begin
					if((s1+s2) > s3) then if ((s1+s3)>s2) then if ((s2+s3>s1)) then 
                    return TRUE;
                    end if;
                    end if;
                    else
                    return FALSE;
                    end if;
			    end; //
delimiter ;
			

delimiter //
	create procedure FUNC_PROC (s1 int, s2 int , s3 int)
		Begin
			declare var varchar(10);
            set var = FUNC1(s1,s2,s3);
            insert into TEMPP_1 values(var);
		end; //
        
delimiter ;
            
call FUNC_PROC(5,6,4);
call FUNC_PROC(10,6,4);
call FUNC_PROC(2,4,8);

select * from TEMPP_1;


-- ----------------------------------- SECTION-2 COMPLETED --------------------------------------------------------------------------------------------------